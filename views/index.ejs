<!DOCTYPE html>
<html>

  <head>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <%include partial/head.ejs %>
   </div>
   <div id="maincont">
    <br>
    <br>
    <div id="c1">
      <img class="exp" src="images/express.png">
      <header class="hc">Web Applications</header>
      <p class="pe">
        Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.
      </p>
      <header class="hc">APIs</header>
      <p class="pe">  
With a myriad of HTTP utility methods and middleware at your disposal, creating a robust API is quick and easy.
      </p>
      <header class="hc">Performance</header>
      <p class="pe">
Express provides a thin layer of fundamental web application features, without obscuring Node.js features that you know and love.
      </p>
    </div>

    <br>
    <br>

    <div id="c2">
      <img src="images/node.png" class="exp">
      <header class="hc">About Node.js</header>
      <p class="pe">
        As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. In the following "hello world" example, many connections can be handled concurrently. Upon each connection, the callback is fired, but if there is no work to be done, Node.js will sleep.
      </p>
      <p class="pe">
        This is in contrast to today's more common concurrency model, in which OS threads are employed. Thread-based networking is relatively inefficient and very difficult to use. Furthermore, users of Node.js are free from worries of dead-locking the process, since there are no locks. Almost no function in Node.js directly performs I/O, so the process never blocks except when the I/O is performed using synchronous methods of Node.js standard library. Because nothing blocks, scalable systems are very reasonable to develop in Node.js.
      </p>
    </div>

    <br>
    <br>

    <div id="c3">
      <img src="images/js.png" class="exp">
      <header class="hc">JavaScript</header>
      <p class="pe">
        JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles. Read more about JavaScript.
      </p>
      <p class="pe">
        This section is dedicated to the JavaScript language itself, and not the parts that are specific to Web pages or other host environments. For information about APIs that are specific to Web pages, please see Web APIs and DOM.
      </p>
    </div>
   </div>
  </body>
</html>
